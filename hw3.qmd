---
title: "Homework 3"
author: "[Evan Eissfeldt]{style='background-color: yellow;'}"
toc: true
title-block-banner: true
title-block-style: default
format: html
# format: pdf
editor: 
  markdown: 
    wrap: 72
---

------------------------------------------------------------------------

::: {.callout-important style="font-size: 0.8em;"}
Please read the instructions carefully before submitting your
assignment.

1.  This assignment requires you to only upload a `PDF` file on Canvas
2.  Don't collapse any code cells before submitting.
3.  Remember to make sure all your code output is rendered properly
    before uploading your submission.

⚠️ Please add your name to the author information in the frontmatter
before submitting your assignment ⚠️
:::

For this assignment, we will be using the [Wine
Quality](https://archive.ics.uci.edu/ml/datasets/wine+quality) dataset
from the UCI Machine Learning Repository. The dataset consists of red
and white *vinho verde* wine samples, from the north of Portugal. The
goal is to model wine quality based on physicochemical tests

We will be using the following libraries:

```{R}
library(readr)
library(tidyr)
library(dplyr)
library(purrr)
library(car)
library(glmnet)
```

## <br><br><br><br>

## Question 1

::: callout-tip
## 50 points

Regression with categorical covariate and $t$-Test
:::

###### 1.1 (5 points)

Read the wine quality datasets from the specified URLs and store them in
data frames `df1` and `df2`.

```{r}
rm(list=ls())
url1 <- "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv"
url2 <- "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv"
df1 <- read.csv2(url1, sep = ";")
df2 <- read.csv2(url2, sep = ";")
```

------------------------------------------------------------------------

###### 1.2 (5 points)

Perform the following tasks to prepare the data frame `df` for analysis:

1.  Combine the two data frames into a single data frame `df`, adding a
    new column called `type` to indicate whether each row corresponds to
    white or red wine.
2.  Rename the columns of `df` to replace spaces with underscores
3.  Remove the columns `fixed_acidity` and `free_sulfur_dioxide`
4.  Convert the `type` column to a factor
5.  Remove rows (if any) with missing values.

```{R}
# add type column
df1 <- df1 %>% 
  mutate(type = "white")
df2 <- df2 %>% 
  mutate(type = "red")

# bind rows
df <- bind_rows(df1, df2)

# replace instances of "." with an underscore
colnames(df) <- gsub("\\.", "_", colnames(df))

# remove columns fixed_acidity and free_sulfur_dioxide
df <- select(df, -fixed_acidity, -free_sulfur_dioxide)

# convert type column to a factor
df$type <- as.factor(df$type)

# remove rows with missing values
df <- na.omit(df)

dim(df)
```

Your output to `R dim(df)` should be

```         
[1] 6497   11
```

------------------------------------------------------------------------

###### 1.3 (20 points)

Recall from STAT 200, the method to compute the $t$ statistic for the
the difference in means (with the equal variance assumption)

1.  Using `df` compute the mean of `quality` for red and white wine
    separately, and then store the difference in means as a variable
    called `diff_mean`.

2.  Compute the pooled sample variance and store the value as a variable
    called `sp_squared`.

3.  Using `sp_squared` and `diff_mean`, compute the $t$ Statistic, and
    store its value in a variable called `t1`.

```{r}
# calculate red mean
mean_red <- df %>% 
  filter(type == "red") %>% 
  summarise(red_quality_mean = mean(quality, na.rm = TRUE))
mean_red <- mean_red[1, 1]

# calculate white mean
mean_white <- df %>% 
  filter(type == "white") %>% 
  summarise(white_quality_mean = mean(quality, na.rm = TRUE))
mean_white <- mean_white[1, 1]

# calculate difference in means
diff_mean <- mean_white - mean_red
diff_mean
```

```{r}
# calculate red variance
variance_red <- df %>% 
  filter(type == "red") %>% 
  summarise(red_quality_variance = var(quality, na.rm = TRUE))
variance_red <- variance_red[1, 1]

# calculate white variance
variance_white <- df %>%
  filter(type == "white") %>%
  summarise(white_quality_variance = var(quality, na.rm = TRUE))
variance_white <- variance_white[1, 1]

# calculate count for red and white
count_red <- nrow(df[df$type == "red", ])
count_white <- nrow(df[df$type == "white", ])

# calculate pooled sample variance
sp_squared <- ((count_red - 1) * variance_red + ((count_white - 1) * variance_white)) / (count_red + count_white - 2)
sp_squared
```
```{r}
# calculate t-statistic
t1 <- diff_mean / sqrt(sp_squared * (1/count_red + 1/count_white))
t1
```

------------------------------------------------------------------------

###### 1.4 (10 points)

Equivalently, R has a function called `t.test()` which enables you to
perform a two-sample $t$-Test without having to compute the pooled
variance and difference in means.

Perform a two-sample t-test to compare the quality of white and red
wines using the `t.test()` function with the setting `var.equal=TRUE`.
Store the t-statistic in `t2`.

```{r}
# filter for red and store
red_only <- df %>%
  filter(type == "red")

# filter for white and store
white_only <- df %>%
  filter(type == "white")

t_test <- t.test(white_only$quality, red_only$quality, var.equal = TRUE)
t_test
```
```{r}
t2 <- t_test$statistic
t2
```

------------------------------------------------------------------------

###### 1.5 (5 points)

Fit a linear regression model to predict `quality` from `type` using the
`lm()` function, and extract the $t$-statistic for the `type`
coefficient from the model summary. Store this $t$-statistic in `t3`.

``` {r}
fit <- lm(quality ~ type, data = df) 
t3 <- coef(summary(fit))[, "t value"][2]
t3
```

------------------------------------------------------------------------

###### 1.6 (5 points)

Print a vector containing the values of `t1`, `t2`, and `t3`. What can
you conclude from this? Why?

```{r}
c(t1, t2, t3)
```
The t-statistics are all the same. 9.68 is also very large for a t-statistic, meaning it is significant.
<br><br><br><br> <br><br><br><br> ---

## Question 2

::: callout-tip
## 25 points

Collinearity
:::

------------------------------------------------------------------------

###### 2.1 (5 points)

Fit a linear regression model with all predictors against the response
variable `quality`. Use the `broom::tidy()` function to print a summary
of the fitted model. What can we conclude from the model summary?

```{r}
df$volatile_acidity <- as.numeric(as.character(df$volatile_acidity))
df$citric_acid <- as.numeric(as.character(df$citric_acid))
df$residual_sugar <- as.numeric(as.character(df$residual_sugar))
df$chlorides <- as.numeric(as.character(df$chlorides))
df$total_sulfur_dioxide <- as.numeric(as.character(df$total_sulfur_dioxide))
df$sulphates <- as.numeric(as.character(df$sulphates))
df$density <- as.numeric(as.character(df$density))
df$pH <- as.numeric(as.character(df$pH))
df$alcohol <- as.numeric(as.character(df$alcohol))
regression_model <- lm(quality ~ ., data = df)
print(broom::tidy(regression_model))
```
All of the p-values except the ones for citric_acid, total_sulfur_dioxide and are very low, indicating that most of the variables are statistically significant when predicting the quality of the wine.

------------------------------------------------------------------------

###### 2.2 (10 points)

Fit two **simple** linear regression models using `lm()`: one with only
`citric_acid` as the predictor, and another with only
`total_sulfur_dioxide` as the predictor. In both models, use `quality`
as the response variable. How does your model summary compare to the
summary from the previous question?

```{r}
citric_model <- lm(quality ~ citric_acid, data = df)
print(broom::tidy(citric_model))
```

```{r}
sulfur_model <- lm(quality ~ total_sulfur_dioxide, data = df)
print(broom::tidy(sulfur_model))
```
In these individual models, both the citric_acid and the total_sulfur_dioxide have much higher p-values than in the original model.

------------------------------------------------------------------------

###### 2.3 (5 points)

Visualize the correlation matrix of all numeric columns in `df` using
`corrplot()`

```{r}
library(corrplot)
dataframe_numeric <- df %>% select_if(is.numeric)
corr_matrix <- cor(dataframe_numeric)
corrplot(corr_matrix, method = "color")
```

------------------------------------------------------------------------

###### 2.4 (5 points)

Compute the variance inflation factor (VIF) for each predictor in the
full model using `vif()` function. What can we conclude from this?

```{r}
vif(regression_model)
```
It seems to be that density and type have high multicollinearity that needs to be accounted for.

<br><br><br><br> <br><br><br><br> ---

## Question 3

::: callout-tip
## 40 points

Variable selection
:::

------------------------------------------------------------------------

###### 3.1 (5 points)

Run a backward stepwise regression using a `full_model` object as the
starting model. Store the final formula in an object called
`backward_formula` using the built-in `formula()` function in R

```{r}
full_model <- regression_model
backwards_model <- step(regression_model, scope = formula(regression_model), direction = "backward")
```

------------------------------------------------------------------------

###### 3.2 (5 points)

Run a forward stepwise regression using a `null_model` object as the
starting model. Store the final formula in an object called
`forward_formula` using the built-in `formula()` function in R

```{r}
null_model <- lm(quality ~ 1, df)
forward_model <- step(null_model, scope = formula(regression_model), direction = "forward")
```

------------------------------------------------------------------------

###### 3.3 (10 points)

1.  Create a `y` vector that contains the response variable (`quality`)
    from the `df` dataframe.

2.  Create a design matrix `X` for the `full_model` object using the
    `make_model_matrix()` function provided in the Appendix.

3.  Then, use the `cv.glmnet()` function to perform LASSO and Ridge
    regression with `X` and `y`.

```{r}
y = c(df$quality)
```
```{R}
make_model_matrix <- function(formula){
  X <- model.matrix(formula, df)[, -1]
  cnames <- colnames(X)
  for(i in 1:ncol(X)){
    if(!cnames[i] == "typewhite"){
      X[, i] <- scale(X[, i])
    } else {
      colnames(X)[i] <- "type"
    }
  }
  return(X)
}
```
```{R}
model_matrix <- make_model_matrix(formula(regression_model))
```
```{R}
lasso_model <- cv.glmnet(model_matrix, y, alpha = 1)
ridge_model <- cv.glmnet(model_matrix, y, alpha = 0)
```

Create side-by-side plots of the ridge and LASSO regression results.
Interpret your main findings.

```{r}
par(mfrow=c(1, 2))
plot(lasso_model, main = "Lasso Model")
plot(ridge_model, main = "Ridge Model") 
```
In the Lasso model, we see the MSE start to spike in between -4 and -3. In the Ridge model, we see the MSE spike slightly after -2, and then start to flatten out around 3.

------------------------------------------------------------------------

###### 3.4 (5 points)

Print the coefficient values for LASSO regression at the `lambda.1se`
value? What are the variables selected by LASSO?

Store the variable names with non-zero coefficients in `lasso_vars`, and
create a formula object called `lasso_formula` using the
`make_formula()` function provided in the Appendix.

```{R}
lasso_coefficients <- coef(lasso_model, s = "lambda.1se")
print(lasso_coefficients)
```
```{R}
lasso_vars <- rownames(lasso_coefficients)[-1]
lasso_vars <- lasso_vars[lasso_coefficients[-1,] != 0]
```
```{r}
make_formula <- function(x){
  as.formula(
    paste("quality ~ ", paste(x, collapse = " + "))
  )
}
```
```{R}
lasso_formula <- make_formula(lasso_vars)
lasso_formula
```



------------------------------------------------------------------------

###### 3.5 (5 points)

Print the coefficient values for ridge regression at the `lambda.1se`
value? What are the variables selected here?

Store the variable names with non-zero coefficients in `ridge_vars`, and
create a formula object called `ridge_formula` using the
`make_formula()` function provided in the Appendix.

```{R}
ridge_coefficients <- coef(ridge_model, s = "lambda.1se")
print(ridge_coefficients)
```
```{R}
ridge_vars <- rownames(ridge_coefficients)[-1]
ridge_vars <- ridge_vars[ridge_coefficients[-1,] != 0]
ridge_formula <- make_formula(ridge_vars)
ridge_formula
```


------------------------------------------------------------------------

###### 3.6 (10 points)

What is the difference between stepwise selection, LASSO and ridge based
on you analyses above?

Stepwise selection adds or removes predictors one at a time, and retests Sum of Squares, RSS, and AIC one at a time, until it achieves optimal results. LASSO penalizes sum of squared coefficients and forces certain coefficients to zero. Ridge also penalizes large coefficients, but will not force coefficients to zero like LASSO.

<br><br><br><br> <br><br><br><br> ---

## Question 4

::: callout-tip
## 70 points

Variable selection
:::

------------------------------------------------------------------------

###### 4.1 (5 points)

Excluding `quality` from `df` we have $10$ possible predictors as the
covariates. How many different models can we create using any subset of
these $10$ coavriates as possible predictors? Justify your answer.

------------------------------------------------------------------------

###### 4.2 (20 points)

Store the names of the predictor variables (all columns except
`quality`) in an object called `x_vars`.

``` r
x_vars <- colnames(df %>% select(-quality))
```

Use:

-   the `combn()` function (built-in R function) and
-   the `make_formula()` (provided in the Appendix)

to **generate all possible linear regression formulas** using the
variables in `x_vars`. This is most optimally achieved using the `map()`
function from the `purrr` package.

``` r
formulas <- map(
  1:length(x_vars),
  \(x){
    vars <- combn(...) # Insert code here
    map(vars, ...) # Insert code here
  }
) %>% unlist()
```

If your code is right the following command should return something
along the lines of:

``` r
sample(formulas, 4) %>% as.character()
# Output:
# [1] "quality ~ volatile_acidity + residual_sugar + density + pH + alcohol"                                                 
# [2] "quality ~ citric_acid"                                                                                                
# [3] "quality ~ volatile_acidity + citric_acid + residual_sugar + total_sulfur_dioxide + density + pH + sulphates + alcohol"
# [4] "quality ~ citric_acid + chlorides + total_sulfur_dioxide + pH + alcohol + type"  
```

------------------------------------------------------------------------

###### 4.3 (10 points)

Use `map()` and `lm()` to fit a linear regression model to each formula
in `formulas`, using `df` as the data source. Use `broom::glance()` to
extract the model summary statistics, and bind them together into a
single tibble of summaries using the `bind_rows()` function from
`dplyr`.

``` r
models <- map(formulas, ...) # Insert your code here
summaries <- map(models, ...) # Insert your code here
```

------------------------------------------------------------------------

###### 4.4 (5 points)

Extract the `adj.r.squared` values from `summaries` and use them to
identify the formula with the ***highest*** adjusted R-squared value.

``` r
... # Insert your code here
```

Store resulting formula as a variable called `rsq_formula`.

``` r
rsq_formula <- ... # Insert your code
```

------------------------------------------------------------------------

###### 4.5 (5 points)

Extract the `AIC` values from `summaries` and use them to identify the
formula with the ***lowest*** AIC value.

``` r
... # Insert your code here
```

Store resulting formula as a variable called `aic_formula`.

``` r
aic_formula <- ... # Insert your code
```

------------------------------------------------------------------------

###### 4.6 (15 points)

Combine all formulas shortlisted into a single vector called
`final_formulas`.

``` r
null_formula <- formula(null_model)
full_formula <- formula(full_model)

final_formulas <- c(
  null_formula,
  full_formula,
  backward_formula,
  forward_formula,
  lasso_formula, 
  ridge_formula,
  rsq_formula,
  aic_formula
)
```

-   Are `aic_formula` and `rsq_formula` the same? How do they differ
    from the formulas shortlisted in question 3?

-   Which of these is more reliable? Why?

-   If we had a dataset with $10,000$ columns, which of these methods
    would you consider for your analyses? Why?

------------------------------------------------------------------------

###### 4.7 (10 points)

Use `map()` and `glance()` to extract the
`sigma, adj.r.squared, AIC, df`, and `p.value` statistics for each model
obtained from `final_formulas`. Bind them together into a single data
frame `summary_table`. Summarize your main findings.

``` r
summary_table <- map(
  final_formulas, 
  \(x) ... # Insert your code here
) %>% bind_rows()

summary_table %>% knitr::kable()
```

::: {.hidden unless-format="pdf"}
\pagebreak
:::

<br><br><br><br> <br><br><br><br> ---

# Appendix

#### Convenience function for creating a formula object

The following function which takes as input a vector of column names `x`
and outputs a `formula` object with `quality` as the response variable
and the columns of `x` as the covariates.

``` r
make_formula <- function(x){
  as.formula(
    paste("quality ~ ", paste(x, collapse = " + "))
  )
}

# For example the following code will
# result in a formula object
# "quality ~ a + b + c"
make_formula(c("a", "b", "c"))
```

#### Convenience function for `glmnet`

The `make_model_matrix` function below takes a `formula` as input and
outputs a **rescaled** model matrix `X` in a format amenable for
`glmnet()`

``` r
make_model_matrix <- function(formula){
  X <- model.matrix(formula, df)[, -1]
  cnames <- colnames(X)
  for(i in 1:ncol(X)){
    if(!cnames[i] == "typewhite"){
      X[, i] <- scale(X[, i])
    } else {
      colnames(X)[i] <- "type"
    }
  }
  return(X)
}
```

::: {.callout-note collapse="true"}
## Session Information

Print your `R` session information using the following command

```{R}
sessionInfo()
```
:::
